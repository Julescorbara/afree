#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
from geometry_msgs.msg import Twist, Point, Quaternion
import tf
from math import radians, copysign, sqrt, pow, pi, atan2
from tf.transformations import euler_from_quaternion
import numpy as np

msg = """

Fonction adaptee de pointop !

control your Turtlebot3!
-----------------------
Insert xyz - coordinate.
x : position x (m)
y : position y (m)
z : orientation z (degree: -180 ~ 180)
If you want to close, insert 's'
-----------------------
"""


class GotoPoint():
    def __init__(self):
        rospy.init_node('turtlebot3_pointop_key', anonymous=False)
        rospy.on_shutdown(self.shutdown)

        # on initialise la position et la commande de mouvement
        self.cmd_vel = rospy.Publisher('cmd_vel', Twist, queue_size=5)
        position = Point()
        move_cmd = Twist()

        # taux de rafraichissement
        r = rospy.Rate(10)

        # création du module d'écoute des données du senseur (odometry)
        self.tf_listener = tf.TransformListener()
        self.odom_frame = 'odom'

        # on essaie de créer le repère qui va servir d'origine à la position du robot
        try:
            self.tf_listener.waitForTransform(self.odom_frame, 'base_footprint', rospy.Time(), rospy.Duration(1.0))
            self.base_frame = 'base_footprint'
        except (tf.Exception, tf.ConnectivityException, tf.LookupException):
            try:
                self.tf_listener.waitForTransform(self.odom_frame, 'base_link', rospy.Time(), rospy.Duration(1.0))
                self.base_frame = 'base_link'
            except (tf.Exception, tf.ConnectivityException, tf.LookupException):
                rospy.loginfo("Cannot find transform between odom and base_link or base_footprint")
                rospy.signal_shutdown("tf Exception")

        # on calcule la position du robot par rapport au repère d'origine
        (position, rotation) = self.get_odom()

        # on initialise les données de rotation, vitesse linéaire et angulaire
        last_rotation = 0
        linear_speed = 1
        angular_speed = 1

        # on demande les coordonnées de l'object : position x,y et rotation z
        (goal_x, goal_y, goal_z) = self.getkey()

        # on vérifie que la rotation entrée est valide
        if goal_z > 180 or goal_z < -180:
            print("you input wrong z range.")
            self.shutdown()

        # on la transforme en radians
        goal_z = np.deg2rad(goal_z)

        # on calcule la distance de l'objectif
        goal_distance = sqrt(pow(goal_x - position.x, 2) + pow(goal_y - position.y, 2))
        distance = goal_distance

        # tant qu'on est à plus de 5cm de l'objectif, on essaie de s'en approcher
        while distance > 0.05:

            # on récupère la position actuelle du robot
            (position, rotation) = self.get_odom()
            x_start = position.x
            y_start = position.y

            # on calcule l'angle du chemin à faire pour le robot
            path_angle = atan2(goal_y - y_start, goal_x- x_start)

            # on fait des tests sur les angles du chemin et l'ancien angle de rotation 
            # pour éviter les erreurs de trigo
            if path_angle < -pi/4 or path_angle > pi/4:
                if goal_y < 0 and y_start < goal_y:
                    path_angle = -2*pi + path_angle
                elif goal_y >= 0 and y_start > goal_y:
                    path_angle = 2*pi + path_angle
            if last_rotation > pi-0.1 and rotation <= 0:
                rotation = 2*pi + rotation
            elif last_rotation < -pi+0.1 and rotation > 0:
                rotation = -2*pi + rotation
            # on peut donc calculer la commande de mouvement angulaire
            move_cmd.angular.z = angular_speed * path_angle-rotation

            # on calcule la distance actuelle du robot à l'objectif
            distance = sqrt(pow((goal_x - x_start), 2) + pow((goal_y - y_start), 2))

            # on demande au robot d'aller à vitesse 0.1 si on est assez loin de l'objectif
            # on ralentit si on s'en approche beaucoup
            move_cmd.linear.x = min(linear_speed * distance, 0.1)

            # on applique le même principe à la vitesse angulaire
            if move_cmd.angular.z > 0:
                move_cmd.angular.z = min(move_cmd.angular.z, 1.5)
            else:
                move_cmd.angular.z = max(move_cmd.angular.z, -1.5)

            # on sauvegarde la rotation actuelle pour l'itération suivante
            last_rotation = rotation
            # on envoie la commande de mouvement
            self.cmd_vel.publish(move_cmd)
            # on dort pendant le temps correspondant à la fréquence de raffraichissement
            r.sleep()

        # une fois qu'on est assez proche, on va devoir tourner le robot pour atteindre l'angle demandé
        # on récupère la position et la rotation du robot
        (position, rotation) = self.get_odom()

        # tant qu'on est à plus de 0.05 radians de l'angle demandé, on essaie de s'en approcher
        while abs(rotation - goal_z) > 0.05:
            (position, rotation) = self.get_odom()
            # on faite une disjonction de cas pour savoir dans quel sens tourner
            # et on fixe la commande de vitesse angulaire à 0.5
            if goal_z >= 0:
                if rotation <= goal_z and rotation >= goal_z - pi:
                    move_cmd.linear.x = 0.00
                    move_cmd.angular.z = 0.5
                else:
                    move_cmd.linear.x = 0.00
                    move_cmd.angular.z = -0.5
            else:
                if rotation <= goal_z + pi and rotation > goal_z:
                    move_cmd.linear.x = 0.00
                    move_cmd.angular.z = -0.5
                else:
                    move_cmd.linear.x = 0.00
                    move_cmd.angular.z = 0.5

            # on envoie la commande de rotation
            self.cmd_vel.publish(move_cmd)

            # on dort pendant le temps correspondant à la fréquence de raffraichissement
            r.sleep()

        # une fois qu'on est suffisamment proche et aligné avec l'objectif, 
        # on envoie un message que le robot s'arrête
        rospy.loginfo("Stopping the robot...")

        # et on envoie une commande pour arrêter le mouvement du robot
        self.cmd_vel.publish(Twist())

    def getkey(self):
        # on demande les coordonées x, y et la rotation z de l'objectif
        x, y, z = input("| x | y | z |\n").split()

        # on arrête le robot si l'utilisateur appuie sur 's'
        if x == 's':
            self.shutdown()

        # on transforme x, y et z en flotants et on renvoie les valeurs
        x, y, z = [float(x), float(y), float(z)]
        return x, y, z

    def get_odom(self):

        # lookupTransform est la fonction qui permet le calcul de la trasnformation (translation, rotation)
        # entre deux repères
        try:
            (trans, rot) = self.tf_listener.lookupTransform(self.odom_frame, self.base_frame, rospy.Time(0))
            rotation = euler_from_quaternion(rot)

        except (tf.Exception, tf.ConnectivityException, tf.LookupException):
            rospy.loginfo("TF Exception")
            return

        return (Point(*trans), rotation[2])


    def shutdown(self):

        # on envoie une commande pour arrêter le mouvement du robot
        self.cmd_vel.publish(Twist())
        rospy.sleep(1)


if __name__ == '__main__':
    try:
        # tant qu'on n'a pas envoyé la commande de shutdown
        while not rospy.is_shutdown():
            # on envoie le message d'infos sur la fonction
            print(msg)
            # on lance la fonction principale
            GotoPoint()

    except:
        rospy.loginfo("shutdown program.")

